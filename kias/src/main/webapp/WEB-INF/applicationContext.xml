<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:ehcache="http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context  
	    http://www.springframework.org/schema/context/spring-context-4.1.xsd  
	    http://www.springframework.org/schema/mvc  
	    http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
	    http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
        http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring     
        http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring/ehcache-spring-1.1.xsd">
        
    <context:property-placeholder location="classpath:jdbc.properties" />
    <!-- 添加注解驱动 -->   
    <mvc:annotation-driven>    
	    <mvc:message-converters register-defaults="true">    
	        <!--json处理-->    
	        <bean    
	            class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">    
	            <property name="supportedMediaTypes">    
	                <list>    
	                    <value>application/json;charset=UTF-8</value>    
	                    <value>text/html;charset=UTF-8</value>    
	                </list>    
	            </property>    
	        </bean>    
	    </mvc:message-converters>    
	</mvc:annotation-driven>    
    <!-- 配置不用DispatcherServlet 拦截的路径 
    <mvc:resources location="/res/" mapping="/res/**"/>   
    --> 
    <context:component-scan base-package="com.kias.web" />  
    <context:component-scan base-package="com.kias.service" />
    <context:component-scan base-package="com.kias.dao" />
    <!--   
    <context:component-scan base-package="com.kias.model" />
   -->
<!-- 避免IE在ajax请求时，返回json出现下载   
    <bean id="jacksonMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">       
        <property name="supportedMediaTypes">  
            <list>  
                <value>text/html;charset=UTF-8</value>  
            </list>  
        </property>  
    </bean> 
-->

    <!-- 配置数据源 mysql -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
        destroy-method="close">
        <property name="driverClass">
            <value>${jdbc.driverClassName}</value>
        </property>
        <property name="jdbcUrl">
            <value>${jdbc.url}</value>
        </property>
        <property name="user">
            <value>${jdbc.username}</value>
        </property>
        <property name="password">
            <value>${jdbc.password}</value>
        </property>
        <!--连接池中保留的最小连接数。 -->
        <property name="minPoolSize">
            <value>0</value>
        </property>
        <!--连接池中保留的最大连接数。Default: 15 -->
        <property name="maxPoolSize">
            <value>30</value>
        </property>
        <!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
        <property name="initialPoolSize">
            <value>10</value>
        </property>
        <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
        <property name="maxIdleTime">
            <value>60</value>
        </property>
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
        <property name="acquireIncrement">
            <value>5</value>
        </property>
        <!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
            如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
        <property name="maxStatements">
            <value>0</value>
        </property>
        <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
        <property name="idleConnectionTestPeriod">
            <value>60</value>
        </property>
        <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
        <property name="acquireRetryAttempts">
            <value>30</value>
        </property>
        <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
            获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
        <property name="breakAfterAcquireFailure">
            <value>true</value>
        </property>
        <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
            等方法来提升连接测试的性能。Default: false -->
        <property name="testConnectionOnCheckout">
            <value>false</value>
        </property>
    </bean>
    <!-- sessionFactory 将spring和mybatis整合 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />
      <!--   <property name="configLocation" value="classpath*:spring-mybatis.xml"></property>  -->
        <property name="mapperLocations" value="classpath*:mapper/*.xml" />  
        <property name="configLocation" value="classpath:spring-mybatis.xml" />
        <property name="plugins">  
            <array>  
                <bean class="com.github.pagehelper.PageInterceptor">  
                    <property name="properties">  
                        <value>  
                        </value>  
                    </property>  
                </bean>  
            </array>  
        </property>
    </bean>
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.kias.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />  
    </bean>
    <!-- 配置事务管理器 -->
    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
        p:dataSource-ref="dataSource" />
    <!-- 通过AOP配置提供事务增强，让service包下所有Bean的所有方法拥有事务 -->
    <aop:config proxy-target-class="true">
        <aop:pointcut id="serviceMethod"
            expression=" execution(* com.kias.service..*(..))" />
        <aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice" />
    </aop:config>
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true" />  
            <tx:method name="count*" read-only="true" />  
            <tx:method name="find*" read-only="true"  />  
            <tx:method name="list*" read-only="true"  />
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>  
            <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>  
            <tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/>  
            <tx:method name="remove*" propagation="REQUIRED"  rollback-for="Exception"/>  
            <tx:method name="del*" propagation="REQUIRED"  rollback-for="Exception"/>  
            <tx:method name="update*" propagation="REQUIRED"  rollback-for="Exception"/>  
        </tx:attributes>
    </tx:advice>
    <!-- 配置视图解析器，将ModelAndView及字符串解析为具体的页面 -->
    <bean
        class="org.springframework.web.servlet.view.InternalResourceViewResolver"
        p:viewClass="org.springframework.web.servlet.view.JstlView" p:prefix="/"
        p:suffix=".jsp" />
    <!-- Spring提供的基于的Ehcache实现的缓存管理器 -->
	<ehcache:annotation-driven />   
    <ehcache:config cache-manager="cacheManager">  
        <ehcache:evict-expired-elements  
            interval="60" />  
    </ehcache:config>    
    <bean id="cacheManager"  
        class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" p:shared="true">  
        <property name="configLocation" value="classpath:ehcache.xml" />  
    </bean> 
    <!-- 上传拦截，如最大上传值及最小上传值 -->  
	<bean id="multipartResolver"  
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
        <!-- set the max upload size100MB -->  
        <property name="maxUploadSize">  
            <value>104857600</value>  
        </property>  
        <property name="maxInMemorySize">  
            <value>4096</value>  
        </property>  
    </bean> 
</beans>